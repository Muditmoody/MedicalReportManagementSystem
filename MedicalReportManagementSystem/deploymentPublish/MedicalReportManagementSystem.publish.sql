/*
Deployment script for MedicalManagementSystem

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MedicalManagementSystem"
:setvar DefaultFilePrefix "MedicalManagementSystem"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Patient].[Patient_Name] is being dropped, data loss could occur.

The column [dbo].[Patient].[First_Name] on table [dbo].[Patient] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column Gender in table [dbo].[Patient] is currently  CHAR (1) NULL but is being changed to  INT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  INT NULL.

The type for column Primary_Contact in table [dbo].[Patient] is currently  VARCHAR (50) NULL but is being changed to  INT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  INT NULL.

The type for column Secondary_Contact in table [dbo].[Patient] is currently  VARCHAR (50) NULL but is being changed to  INT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  INT NULL.
*/

PRINT N'Creating table [dbo].[Patient]...';

GO

CREATE TABLE [dbo].[Patient] (
    [Patient_ID]        INT           IDENTITY (1, 1) NOT NULL,
    [First_Name]        VARCHAR (100) NOT NULL,
    [Last_Name]         VARCHAR (100) NULL,
    [Date_of_birth]     DATETIME      NULL,
    [Gender]            INT           NULL,
    [City_ID]           INT           NULL,
    [Province_ID]       INT           NULL,
    [Primary_Contact]   INT           NULL,
    [Secondary_Contact] INT           NULL,
    CONSTRAINT [PK_Patient1] PRIMARY KEY CLUSTERED ([Patient_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[City]...';


GO
CREATE TABLE [dbo].[City] (
    [City_ID]   INT          IDENTITY (1, 1) NOT NULL,
    [City_Name] VARCHAR (50) NULL,
    CONSTRAINT [PK_City] PRIMARY KEY CLUSTERED ([City_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Gender]...';


GO
CREATE TABLE [dbo].[Gender] (
    [Gender_ID]   INT          IDENTITY (1, 1) NOT NULL,
    [Gender_Name] VARCHAR (10) NULL,
    CONSTRAINT [PK_Gender] PRIMARY KEY CLUSTERED ([Gender_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Hospital]...';


GO
CREATE TABLE [dbo].[Hospital] (
    [Hospital_ID]   INT           IDENTITY (1, 1) NOT NULL,
    [Hospital_Name] VARCHAR (100) NULL,
    [City_ID]       INT           NULL,
    [Province_ID]   INT           NULL,
    [Contact]       VARCHAR (50)  NULL,
    CONSTRAINT [PK_Hospital] PRIMARY KEY CLUSTERED ([Hospital_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Hospital_Physician]...';


GO
CREATE TABLE [dbo].[Hospital_Physician] (
    [Hospital_ID]           INT      NOT NULL,
    [Physician_ID]          INT      NOT NULL,
    [Employment_Start_Date] DATETIME NULL,
    CONSTRAINT [PK_Hospital_Physician_Mapping] PRIMARY KEY CLUSTERED ([Hospital_ID] ASC, [Physician_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Hospital_Procedure]...';


GO
CREATE TABLE [dbo].[Hospital_Procedure] (
    [Hospital_ID]  INT NOT NULL,
    [Procedure_ID] INT NOT NULL,
    CONSTRAINT [PK_Hospital_Procedure_Mapping] PRIMARY KEY CLUSTERED ([Hospital_ID] ASC, [Procedure_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Insurance_Policy]...';


GO
CREATE TABLE [dbo].[Insurance_Policy] (
    [Policy_ID]               INT           IDENTITY (1, 1) NOT NULL,
    [Policy_Reference_Number] VARCHAR (100) NULL,
    [Patient_ID]              INT           NULL,
    [Insurer_ID]              INT           NULL,
    [Policy_Start_Date]       DATETIME      NULL,
    [Policy_End_Date]         DATETIME      NULL,
    [Comments]                VARCHAR (500) NULL,
    CONSTRAINT [PK_Insurance_Policy] PRIMARY KEY CLUSTERED ([Policy_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Insurer]...';


GO
CREATE TABLE [dbo].[Insurer] (
    [Insurer_ID]   INT           IDENTITY (1, 1) NOT NULL,
    [Insurer_Name] VARCHAR (100) NULL,
    [City_ID]      INT           NULL,
    [Province_ID]  INT           NULL,
    [Contact]      VARCHAR (100) NULL,
    CONSTRAINT [PK_Insurer] PRIMARY KEY CLUSTERED ([Insurer_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Medical_Procedure]...';


GO
CREATE TABLE [dbo].[Medical_Procedure] (
    [Procedure_ID]   INT           IDENTITY (1, 1) NOT NULL,
    [Procedure_Name] VARCHAR (100) NULL,
    CONSTRAINT [PK_Procedure] PRIMARY KEY CLUSTERED ([Procedure_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Medical_Report]...';


GO
CREATE TABLE [dbo].[Medical_Report] (
    [Report_ID]           INT      IDENTITY (1, 1) NOT NULL,
    [Patient_ID]          INT      NOT NULL,
    [Report_Date]         DATETIME NULL,
    [Physician_ID]        INT      NULL,
    [Hospital_ID]         INT      NULL,
    [IsValid]             BIT      NULL,
    [MedicalCondition_ID] INT      NULL,
    CONSTRAINT [PK_Medical_Report] PRIMARY KEY CLUSTERED ([Report_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[MedicalCondition]...';


GO
CREATE TABLE [dbo].[MedicalCondition] (
    [MedicalCondition_ID] INT          IDENTITY (1, 1) NOT NULL,
    [Condition_Name]      VARCHAR (50) NULL,
    CONSTRAINT [PK_MedicalCondition] PRIMARY KEY CLUSTERED ([MedicalCondition_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Medicine]...';


GO
CREATE TABLE [dbo].[Medicine] (
    [Medicine_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [Medicine_Name]       VARCHAR (100) NULL,
    [Composition]         VARCHAR (500) NULL,
    [Potency]             VARCHAR (10)  NULL,
    [Side_Effects]        VARCHAR (500) NULL,
    [Comments]            VARCHAR (500) NULL,
    [MedicalCondition_ID] INT           NULL,
    CONSTRAINT [PK_Medicine] PRIMARY KEY CLUSTERED ([Medicine_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Physician]...';


GO
CREATE TABLE [dbo].[Physician] (
    [Physician_ID] INT          IDENTITY (1, 1) NOT NULL,
    [First_Name]   VARCHAR (50) NULL,
    [Last_Name]    VARCHAR (50) NULL,
    [City_ID]      INT          NULL,
    [Province_ID]  INT          NULL,
    [Contact]      VARCHAR (50) NULL,
    CONSTRAINT [PK_Physician] PRIMARY KEY CLUSTERED ([Physician_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Physician_Procedure]...';


GO
CREATE TABLE [dbo].[Physician_Procedure] (
    [Physician_ID] INT NOT NULL,
    [Procedure_ID] INT NOT NULL,
    CONSTRAINT [PK_Physician_Procedure_Mapping] PRIMARY KEY CLUSTERED ([Physician_ID] ASC, [Procedure_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Physician_Specilization]...';


GO
CREATE TABLE [dbo].[Physician_Specilization] (
    [Physician_ID]      INT          NOT NULL,
    [Specialization_ID] INT          NOT NULL,
    [Proficiency]       VARCHAR (50) NULL,
    CONSTRAINT [PK_Physician_Specialization] PRIMARY KEY CLUSTERED ([Physician_ID] ASC, [Specialization_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Prescription]...';


GO
CREATE TABLE [dbo].[Prescription] (
    [Prescription_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [Report_ID]               INT           NULL,
    [Medicine_ID]             INT           NULL,
    [Dosage]                  VARCHAR (50)  NULL,
    [Prescription_Start_Date] DATETIME      NULL,
    [Prescription_End_Date]   DATETIME      NULL,
    [Comments]                VARCHAR (100) NULL,
    CONSTRAINT [PK_Prescription] PRIMARY KEY CLUSTERED ([Prescription_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Province]...';


GO
CREATE TABLE [dbo].[Province] (
    [Province_ID]   INT          IDENTITY (1, 1) NOT NULL,
    [Province_Name] VARCHAR (50) NULL,
    CONSTRAINT [PK_Province] PRIMARY KEY CLUSTERED ([Province_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Report_Procedure]...';


GO
CREATE TABLE [dbo].[Report_Procedure] (
    [Report_Procedure_ID] INT      IDENTITY (1, 1) NOT NULL,
    [Procedure_ID]        INT      NULL,
    [Report_ID]           INT      NULL,
    [Procedure_Date]      DATETIME NULL,
    CONSTRAINT [PK_Report_Procedure] PRIMARY KEY CLUSTERED ([Report_Procedure_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Specialization]...';


GO
CREATE TABLE [dbo].[Specialization] (
    [Specialization_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Name]              VARCHAR (100) NULL,
    [Department]        VARCHAR (100) NULL,
    CONSTRAINT [PK_Specialization] PRIMARY KEY CLUSTERED ([Specialization_ID] ASC)
);


GO
PRINT N'Creating Default Constraint [dbo].[DF_physician_emp_start_date]...';


GO
ALTER TABLE [dbo].[Hospital_Physician]
    ADD CONSTRAINT [DF_physician_emp_start_date] DEFAULT (CURRENT_TIMESTAMP) FOR [Employment_Start_Date];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Policy_Start]...';


GO
ALTER TABLE [dbo].[Insurance_Policy]
    ADD CONSTRAINT [DF_Policy_Start] DEFAULT (CURRENT_TIMESTAMP) FOR [Policy_Start_Date];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Report_Date]...';


GO
ALTER TABLE [dbo].[Medical_Report]
    ADD CONSTRAINT [DF_Report_Date] DEFAULT (CURRENT_TIMESTAMP) FOR [Report_Date];


GO
PRINT N'Creating Default Constraint [dbo].[df_IsValid]...';


GO
ALTER TABLE [dbo].[Medical_Report]
    ADD CONSTRAINT [df_IsValid] DEFAULT ('Y') FOR [IsValid];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Procedure_Date]...';


GO
ALTER TABLE [dbo].[Report_Procedure]
    ADD CONSTRAINT [DF_Procedure_Date] DEFAULT (CURRENT_TIMESTAMP) FOR [Procedure_Date];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Gender_Patient]...';


GO
ALTER TABLE [dbo].[Patient] WITH NOCHECK
    ADD CONSTRAINT [FK_Gender_Patient] FOREIGN KEY ([Gender]) REFERENCES [dbo].[Gender] ([Gender_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_City_Patient]...';


GO
ALTER TABLE [dbo].[Patient] WITH NOCHECK
    ADD CONSTRAINT [FK_City_Patient] FOREIGN KEY ([City_ID]) REFERENCES [dbo].[City] ([City_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Province_Patient]...';


GO
ALTER TABLE [dbo].[Patient] WITH NOCHECK
    ADD CONSTRAINT [FK_Province_Patient] FOREIGN KEY ([Province_ID]) REFERENCES [dbo].[Province] ([Province_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_City_Hospital]...';


GO
ALTER TABLE [dbo].[Hospital] WITH NOCHECK
    ADD CONSTRAINT [FK_City_Hospital] FOREIGN KEY ([City_ID]) REFERENCES [dbo].[City] ([City_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Province_Hospital]...';


GO
ALTER TABLE [dbo].[Hospital] WITH NOCHECK
    ADD CONSTRAINT [FK_Province_Hospital] FOREIGN KEY ([Province_ID]) REFERENCES [dbo].[Province] ([Province_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Hospital_Physician_Hospital]...';


GO
ALTER TABLE [dbo].[Hospital_Physician] WITH NOCHECK
    ADD CONSTRAINT [FK_Hospital_Physician_Hospital] FOREIGN KEY ([Hospital_ID]) REFERENCES [dbo].[Hospital] ([Hospital_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Hospital_Physician_Physician]...';


GO
ALTER TABLE [dbo].[Hospital_Physician] WITH NOCHECK
    ADD CONSTRAINT [FK_Hospital_Physician_Physician] FOREIGN KEY ([Physician_ID]) REFERENCES [dbo].[Physician] ([Physician_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Hospital_Procedure_Hospital]...';


GO
ALTER TABLE [dbo].[Hospital_Procedure] WITH NOCHECK
    ADD CONSTRAINT [FK_Hospital_Procedure_Hospital] FOREIGN KEY ([Hospital_ID]) REFERENCES [dbo].[Hospital] ([Hospital_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Hospital_Procedure_Procedure]...';


GO
ALTER TABLE [dbo].[Hospital_Procedure] WITH NOCHECK
    ADD CONSTRAINT [FK_Hospital_Procedure_Procedure] FOREIGN KEY ([Procedure_ID]) REFERENCES [dbo].[Medical_Procedure] ([Procedure_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Policy_Patient]...';


GO
ALTER TABLE [dbo].[Insurance_Policy] WITH NOCHECK
    ADD CONSTRAINT [FK_Policy_Patient] FOREIGN KEY ([Patient_ID]) REFERENCES [dbo].[Patient] ([Patient_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Policy_Insurer]...';


GO
ALTER TABLE [dbo].[Insurance_Policy] WITH NOCHECK
    ADD CONSTRAINT [FK_Policy_Insurer] FOREIGN KEY ([Insurer_ID]) REFERENCES [dbo].[Insurer] ([Insurer_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_City_Insurer]...';


GO
ALTER TABLE [dbo].[Insurer] WITH NOCHECK
    ADD CONSTRAINT [FK_City_Insurer] FOREIGN KEY ([City_ID]) REFERENCES [dbo].[City] ([City_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Province_Insurer]...';


GO
ALTER TABLE [dbo].[Insurer] WITH NOCHECK
    ADD CONSTRAINT [FK_Province_Insurer] FOREIGN KEY ([Province_ID]) REFERENCES [dbo].[Province] ([Province_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MedicalReport_Patient]...';


GO
ALTER TABLE [dbo].[Medical_Report] WITH NOCHECK
    ADD CONSTRAINT [FK_MedicalReport_Patient] FOREIGN KEY ([Patient_ID]) REFERENCES [dbo].[Patient] ([Patient_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MedicalReport_Physician]...';


GO
ALTER TABLE [dbo].[Medical_Report] WITH NOCHECK
    ADD CONSTRAINT [FK_MedicalReport_Physician] FOREIGN KEY ([Physician_ID]) REFERENCES [dbo].[Physician] ([Physician_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MedicalReport_Hospital]...';


GO
ALTER TABLE [dbo].[Medical_Report] WITH NOCHECK
    ADD CONSTRAINT [FK_MedicalReport_Hospital] FOREIGN KEY ([Hospital_ID]) REFERENCES [dbo].[Hospital] ([Hospital_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MedicalReport_MedicalCondition]...';


GO
ALTER TABLE [dbo].[Medical_Report] WITH NOCHECK
    ADD CONSTRAINT [FK_MedicalReport_MedicalCondition] FOREIGN KEY ([MedicalCondition_ID]) REFERENCES [dbo].[MedicalCondition] ([MedicalCondition_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Medicine_MedicalCondition]...';


GO
ALTER TABLE [dbo].[Medicine] WITH NOCHECK
    ADD CONSTRAINT [FK_Medicine_MedicalCondition] FOREIGN KEY ([MedicalCondition_ID]) REFERENCES [dbo].[MedicalCondition] ([MedicalCondition_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_City_Physician]...';


GO
ALTER TABLE [dbo].[Physician] WITH NOCHECK
    ADD CONSTRAINT [FK_City_Physician] FOREIGN KEY ([City_ID]) REFERENCES [dbo].[City] ([City_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Province_Physician]...';


GO
ALTER TABLE [dbo].[Physician] WITH NOCHECK
    ADD CONSTRAINT [FK_Province_Physician] FOREIGN KEY ([Province_ID]) REFERENCES [dbo].[Province] ([Province_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Physician_Procedure_Physician]...';


GO
ALTER TABLE [dbo].[Physician_Procedure] WITH NOCHECK
    ADD CONSTRAINT [FK_Physician_Procedure_Physician] FOREIGN KEY ([Physician_ID]) REFERENCES [dbo].[Physician] ([Physician_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Physician_Procedure_Procedure]...';


GO
ALTER TABLE [dbo].[Physician_Procedure] WITH NOCHECK
    ADD CONSTRAINT [FK_Physician_Procedure_Procedure] FOREIGN KEY ([Procedure_ID]) REFERENCES [dbo].[Medical_Procedure] ([Procedure_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Physician_Spec_Physician]...';


GO
ALTER TABLE [dbo].[Physician_Specilization] WITH NOCHECK
    ADD CONSTRAINT [FK_Physician_Spec_Physician] FOREIGN KEY ([Physician_ID]) REFERENCES [dbo].[Physician] ([Physician_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Physician_Spec_Specialization]...';


GO
ALTER TABLE [dbo].[Physician_Specilization] WITH NOCHECK
    ADD CONSTRAINT [FK_Physician_Spec_Specialization] FOREIGN KEY ([Specialization_ID]) REFERENCES [dbo].[Specialization] ([Specialization_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Prescription_Report]...';


GO
ALTER TABLE [dbo].[Prescription] WITH NOCHECK
    ADD CONSTRAINT [FK_Prescription_Report] FOREIGN KEY ([Report_ID]) REFERENCES [dbo].[Medical_Report] ([Report_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Prescription_Medicine]...';


GO
ALTER TABLE [dbo].[Prescription] WITH NOCHECK
    ADD CONSTRAINT [FK_Prescription_Medicine] FOREIGN KEY ([Medicine_ID]) REFERENCES [dbo].[Medicine] ([Medicine_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Report_Procedure_Procedure]...';


GO
ALTER TABLE [dbo].[Report_Procedure] WITH NOCHECK
    ADD CONSTRAINT [FK_Report_Procedure_Procedure] FOREIGN KEY ([Procedure_ID]) REFERENCES [dbo].[Medical_Procedure] ([Procedure_ID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Report_Procedure_Report]...';


GO
ALTER TABLE [dbo].[Report_Procedure] WITH NOCHECK
    ADD CONSTRAINT [FK_Report_Procedure_Report] FOREIGN KEY ([Report_ID]) REFERENCES [dbo].[Medical_Report] ([Report_ID]);


GO
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

MERGE INTO Patient AS Target
USING (VALUES
	(1, '','','','',1,1,'','')
)
AS Source (
			[Patient_ID],
			[First_Name],
			[Last_Name],
			[Date_of_birth],
			[Gender],
			[City_ID],
			[Province_ID],
			[Primary_Contact],
			[Secondary_Contact]
		  )

ON Source.[Patient_ID] = Target.[Patient_ID]

WHEN MATCHED THEN
UPDATE SET [First_Name]			= Source.[First_Name],
		   [Last_Name]			= Source.[Last_Name],
		   [Date_of_birth]		= Source.[Date_of_birth],
		   [Gender]				= Source.[Gender],
		   [City_ID]			= Source.[City_ID],
		   [Province_ID]		= Source.[Province_ID],
		   [Primary_Contact]	= Source.[Primary_Contact],
		   [Secondary_Contact]	= Source.[Secondary_Contact]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[Patient_ID],
		[First_Name],
		[Last_Name],
		[Date_of_birth],
		[Gender],
		[City_ID],
		[Province_ID],
		[Primary_Contact],
		[Secondary_Contact]
		)

		VALUES
		(
		Source.[First_Name],
		Source.[Last_Name],
		Source.[Date_of_birth],
		Source.[Gender],
		Source.[City_ID],
		Source.[Province_ID],
		Source.[Primary_Contact],
		Source.[Secondary_Contact]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO City AS Target
USING (VALUES
	(1, '')
)
AS Source (
			[City_ID],
		    [City_Name]
		  )

ON Source.[City_ID] = Target.[City_ID]

WHEN MATCHED THEN
UPDATE SET [City_Name] = Source.[City_Name]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[City_ID],
		[City_Name]
		)
		VALUES
		(
		Source.[City_ID],
		Source.[City_Name]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Gender AS Target
USING (VALUES
	(1, '')
)

AS Source (
			[Gender_ID],
			[Gender_Name]
		  )

ON Source.[Gender_ID] = Target.[Gender_ID]

WHEN MATCHED THEN
UPDATE SET [Gender_Name] = Source.[Gender_Name]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[Gender_ID],
		[Gender_Name]
		)
		VALUES
		(
		Source.[Gender_ID],
		Source.[Gender_Name]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Hospital AS Target
USING (VALUES
    (1, '',1,1,'')
)
AS Source ([Hospital_ID],
           [Hospital_Name],
           [City_ID],
           [Province_ID],
           [Contact]
           )

ON Source.[Hospital_ID] = Target.[Hospital_ID]

WHEN MATCHED THEN
UPDATE SET [Hospital_Name] = Source.[Hospital_Name],
           [City_ID]	   = Source.[City_ID],
           [Province_ID]   = Source.[Province_ID],
           [Contact]	   = Source.[Contact]

WHEN NOT MATCHED BY Target THEN
INSERT ([Hospital_ID],
        [Hospital_Name],
        [City_ID],
        [Province_ID],
        [Contact]
       )
        VALUES
        (Source.[Hospital_ID],
        Source.[Hospital_Name],
        Source.[City_ID],
        Source.[Province_ID],
        Source.[Contact]
        )

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Hospital_Physician AS Target
USING (VALUES
    (1, 1,'2022-Jan-10')
)
AS Source ([Hospital_ID],
           [Physician_ID],
           [Employment_Start_Date]
          )

ON Source.[Hospital_ID] = Target.[Hospital_ID]
   AND Source.[Physician_ID] = Target.[Physician_ID]

WHEN MATCHED THEN
UPDATE SET [Employment_Start_Date] = Source.[Employment_Start_Date]

WHEN NOT MATCHED BY Target THEN
INSERT ( [Hospital_ID],
         [Physician_ID],
         [Employment_Start_Date]
       )
        VALUES
        (
        Source.[Hospital_ID],
        Source.[Physician_ID],
        Source.[Employment_Start_Date]
        )

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Hospital_Procedure AS Target
USING (VALUES
    (1, 1)
)
AS Source (
            [Hospital_ID],
            [Procedure_ID]
          )

ON Source.[Hospital_ID] = Target.[Hospital_ID]
   AND Source.[Procedure_ID] = Target.[Procedure_ID]

WHEN NOT MATCHED BY Target THEN
INSERT ( [Hospital_ID],
         [Procedure_ID]
       )
        VALUES
        (
        Source.[Hospital_ID],
        Source.[Procedure_ID]
        )

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Insurance_Policy AS Target
USING (VALUES
    (1, '',1,1,'2022-Jan-1','2022-Dec-31','')
)
AS Source (
           [Policy_ID],
           [Policy_Reference_Number],
           [Patient_ID],
           [Insurer_ID],
           [Policy_Start_Date],
           [Policy_End_Date],
           [Comments]
           )

ON Source.[Policy_ID] = Target.[Policy_ID]

WHEN MATCHED THEN
UPDATE SET [Policy_Reference_Number] = Source.[Policy_Reference_Number],
           [Patient_ID]				 = Source.[Patient_ID],
           [Insurer_ID]				 = Source.[Insurer_ID],
           [Policy_Start_Date]		 = Source.[Policy_Start_Date],
           [Policy_End_Date]		 = Source.[Policy_End_Date],
           [Comments]				 = Source.[Comments]

WHEN NOT MATCHED BY Target THEN
INSERT (
        [Policy_ID],
        [Policy_Reference_Number],
        [Patient_ID],
        [Insurer_ID],
        [Policy_Start_Date],
        [Policy_End_Date],
        [Comments]
       )
        VALUES
        (
        Source.[Policy_ID],
        Source.[Policy_Reference_Number],
        Source.[Patient_ID],
        Source.[Insurer_ID],
        Source.[Policy_Start_Date],
        Source.[Policy_End_Date],
        Source.[Comments]
        )

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Insurer AS Target
USING (VALUES
    (1, '',1,1,'')
)
AS Source (
           [Insurer_ID],
           [Insurer_Name],
           [City_ID],
           [Province_ID],
           [Contact]
           )

ON Source.[Insurer_ID] = Target.[Insurer_ID]

WHEN MATCHED THEN
UPDATE SET [Insurer_Name]	= Source.[Insurer_Name],
           [City_ID]        = Source.[City_ID],
           [Province_ID]    = Source.[Province_ID],
           [Contact]		= Source.[Contact]

WHEN NOT MATCHED BY Target THEN
INSERT (
        [Insurer_ID],
        [Insurer_Name],
        [City_ID],
        [Province_ID],
        [Contact]
       )
        VALUES
        (
        Source.[Hospital_ID],
        Source.[Insurer_Name],
        Source.[City_ID],
        Source.[Province_ID],
        Source.[Contact]
        )

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Medical_Procedure AS Target
USING (VALUES
	(1, '')
)
AS Source (
			[Procedure_ID],
		    [Procedure_Name]
		  )

ON Source.[Procedure_ID] = Target.[Procedure_ID]

WHEN MATCHED THEN
UPDATE SET [Procedure_Name] = Source.[Procedure_Name]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[Procedure_ID],
		[Procedure_Name]
		)
		VALUES
		(
		Source.[Procedure_ID],
		Source.[Procedure_Name]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;
GO
MERGE INTO Medical_Report AS Target
USING (VALUES
    (1,1, '2022-Jan-1',1,1,'Y')
)
AS Source (
            [Report_ID],
            [Patient_ID],
            [Report_Date],
            [Physician_ID],
            [Hospital_ID],
            [IsValid]
           )

ON Source.[Report_ID] = Target.[Report_ID]

WHEN MATCHED THEN
UPDATE SET
            [Patient_ID]	= Source.[Patient_ID],
            [Report_Date]	= Source.[Report_Date],
            [Physician_ID]	= Source.[Physician_ID],
            [Hospital_ID]	= Source.[Hospital_ID],
            [IsValid]		= Source.[IsValid]

WHEN NOT MATCHED BY Target THEN
INSERT (
        [Report_ID],
        [Patient_ID],
        [Report_Date],
        [Physician_ID],
        [Hospital_ID],
        [IsValid]
       )
        VALUES
        (
        Source.[Report_ID],
        Source.[Patient_ID],
        Source.[Report_Date],
        Source.[Physician_ID],
        Source.[Hospital_ID],
        Source.[IsValid]
        )

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO Medicine AS Target
USING (VALUES
	(1, '','','','','')
)
AS Source (
			[Medicine_ID],
			[Medicine_Name],
			[Composition],
			[Potency],
			[Side_Effects],
			[Comments]
		  )

ON Source.[Medicine_ID] = Target.[Medicine_ID]

WHEN MATCHED THEN
UPDATE SET [Medicine_Name]	= Source.[Medicine_Name],
		   [Composition]	= Source.[Composition],
		   [Potency]		= Source.[Potency],
		   [Side_Effects]	= Source.[Side_Effects],
		   [Comments]		= Source.[Comments]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[Medicine_ID],
		[Medicine_Name],
		[Composition],
		[Potency],
		[Side_Effects],
		[Comments]
		)

		VALUES
		(
		Source.[Medicine_ID],
		Source.[Medicine_Name],
		Source.[Composition],
		Source.[Potency],
		Source.[Side_Effects],
		Source.[Comments]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Patient] WITH CHECK CHECK CONSTRAINT [FK_Gender_Patient];

ALTER TABLE [dbo].[Patient] WITH CHECK CHECK CONSTRAINT [FK_City_Patient];

ALTER TABLE [dbo].[Patient] WITH CHECK CHECK CONSTRAINT [FK_Province_Patient];

ALTER TABLE [dbo].[Hospital] WITH CHECK CHECK CONSTRAINT [FK_City_Hospital];

ALTER TABLE [dbo].[Hospital] WITH CHECK CHECK CONSTRAINT [FK_Province_Hospital];

ALTER TABLE [dbo].[Hospital_Physician] WITH CHECK CHECK CONSTRAINT [FK_Hospital_Physician_Hospital];

ALTER TABLE [dbo].[Hospital_Physician] WITH CHECK CHECK CONSTRAINT [FK_Hospital_Physician_Physician];

ALTER TABLE [dbo].[Hospital_Procedure] WITH CHECK CHECK CONSTRAINT [FK_Hospital_Procedure_Hospital];

ALTER TABLE [dbo].[Hospital_Procedure] WITH CHECK CHECK CONSTRAINT [FK_Hospital_Procedure_Procedure];

ALTER TABLE [dbo].[Insurance_Policy] WITH CHECK CHECK CONSTRAINT [FK_Policy_Patient];

ALTER TABLE [dbo].[Insurance_Policy] WITH CHECK CHECK CONSTRAINT [FK_Policy_Insurer];

ALTER TABLE [dbo].[Insurer] WITH CHECK CHECK CONSTRAINT [FK_City_Insurer];

ALTER TABLE [dbo].[Insurer] WITH CHECK CHECK CONSTRAINT [FK_Province_Insurer];

ALTER TABLE [dbo].[Medical_Report] WITH CHECK CHECK CONSTRAINT [FK_MedicalReport_Patient];

ALTER TABLE [dbo].[Medical_Report] WITH CHECK CHECK CONSTRAINT [FK_MedicalReport_Physician];

ALTER TABLE [dbo].[Medical_Report] WITH CHECK CHECK CONSTRAINT [FK_MedicalReport_Hospital];

ALTER TABLE [dbo].[Medical_Report] WITH CHECK CHECK CONSTRAINT [FK_MedicalReport_MedicalCondition];

ALTER TABLE [dbo].[Medicine] WITH CHECK CHECK CONSTRAINT [FK_Medicine_MedicalCondition];

ALTER TABLE [dbo].[Physician] WITH CHECK CHECK CONSTRAINT [FK_City_Physician];

ALTER TABLE [dbo].[Physician] WITH CHECK CHECK CONSTRAINT [FK_Province_Physician];

ALTER TABLE [dbo].[Physician_Procedure] WITH CHECK CHECK CONSTRAINT [FK_Physician_Procedure_Physician];

ALTER TABLE [dbo].[Physician_Procedure] WITH CHECK CHECK CONSTRAINT [FK_Physician_Procedure_Procedure];

ALTER TABLE [dbo].[Physician_Specilization] WITH CHECK CHECK CONSTRAINT [FK_Physician_Spec_Physician];

ALTER TABLE [dbo].[Physician_Specilization] WITH CHECK CHECK CONSTRAINT [FK_Physician_Spec_Specialization];

ALTER TABLE [dbo].[Prescription] WITH CHECK CHECK CONSTRAINT [FK_Prescription_Report];

ALTER TABLE [dbo].[Prescription] WITH CHECK CHECK CONSTRAINT [FK_Prescription_Medicine];

ALTER TABLE [dbo].[Report_Procedure] WITH CHECK CHECK CONSTRAINT [FK_Report_Procedure_Procedure];

ALTER TABLE [dbo].[Report_Procedure] WITH CHECK CHECK CONSTRAINT [FK_Report_Procedure_Report];


GO
PRINT N'Update complete.';


GO
